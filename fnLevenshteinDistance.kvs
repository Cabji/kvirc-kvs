/* This is a rough implementation of the Levenshtein Distance algorithm.
  This algorithm is used to determine how similar two strings are to each other by calculating the number of individual changes it would 
  take to make one of the strings exactly the same as the other.
  
  Use fnStrSimilarity to compare two strings: 
  %similarity = $fnStrSimilarity(<%s1>, <%s2>, [%type])
  
  where %s1 is a string, %s2 is a string, %type is a string that decides the value to return.
  Return values are: 
  similarity - the number of characters deemed to be similar between the two strings
  distance - the number of alterations required to make the two strings match (opposite to similarity)
  default - if no type value is passed the default is to return the similarity expressed as a percentage in real format. 
  	    0 means there is no similarity, 1 means the 2 strings match. using this return value you can decide which string 
	    is the best match from a list of candidates.
*/

function (fnArrayRemoveEmptyValues)
{
	%success = $false
	if ($typeOf($0) == array) {%arr1 = $0;}
	%n = 0

	for (%i = 0; %i < %arr1[]#; %i++)
	{
		if (%arr1[%i] != $null)
		{
			%temp[%n] = %arr1[%i]
			%n++
		}
	}
	%success = %temp
	return %success
}

function (fnStrSimilarity)
{
	%s1 = $str.split("",$0)
	%s2 = $str.split("",$1)
	%returnType = $2

	%s1 = $fnArrayRemoveEmptyValues(%s1)
	%s2 = $fnArrayRemoveEmptyValues(%s2)

	# string padding
	%diff = $integer($(%s1[]# - %s2[]#))
#	echo diff: %diff
	if (%diff != 0)
	{
		for (%i = 0; %i < $math.abs(%diff); %i++)
			%temp[%i] = " ";
		if (%diff > 0)
		{
			%diff = $math.abs(%diff)
			# s1 is longer than s2 by abs(diff)
#			echo s1 is %diff chars longer than s2
			foreach (%val, %s2)
				%temp[%temp[]#] = %val;
			%s2 = %temp
		}
		else
		{
			%diff = $math.abs(%diff)
			# s2 is longer than s1 by abs(diff)
#			echo s2 is %diff chars longer than s1
			foreach (%val, %s1)
				%temp[%temp[]#] = %val;
			%s1 = %temp
		}
	}

#	echo s1: %string1
#	echo s2: %string2

	# cost calculation
	for (%i = 0; %i < $length(%s1); %i++)
	{
		for (%j = 0; %j < $length(%s2); %j++)
		{
			if (%s1[%i] != %s2[%j])
			{
				#echo %s1[%i] does not match %s2[%j];
				%cost = 1;
			}
			else
				%cost = 0;

			if (%i > 0 && %j > 0)
			{
				%left = $(%ldMatrix[$(%i - 1)][%j] + 1)
				%above = $(%ldMatrix[%i][$(%j - 1)] + 1)
				%prev = $(%ldMatrix[$(%i - 1)][$(%j - 1)] + %cost)
				%smallest = $sort($array(%left, %above, %prev))
				%ldMatrix[%i][%j] = %smallest[0]
			}
			else
				%ldMatrix[%i][%j] = %cost

		}
	}

	# convert the levenshtein distance cost into a percentage (float from 0 to 1)
	%similarity = $(%s1[]# - %ldMatrix[$(%s1[]# - 1)][$(%s2[]# - 1)])
	%simPercent = $(%similarity / $real(%s1[]#))


	# output the levenshtein distance matrix
	%o = "  "
	foreach (%char, %s2)
	{
		%o .= %char", "
	}

	echo %o

	for (%i = 0; %i < $length(%s1); %i++)
	{
		%o = ""
		%o .= %s1[%i]" " 
		for (%j = 0; %j < $length(%s2); %j++)
		{
			%o .= %ldMatrix[%i][%j]", ";
		}
		echo %o
	}

	if (%returnType == similarity)
		return %similarity;
	if (%returnType == distance)
		return %ldMatrix[$(%s1[]# - 1)][$(%s2[]# - 1)];
	else
		return %simPercent;
}
